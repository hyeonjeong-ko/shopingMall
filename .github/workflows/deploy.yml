name: CI/CD Pipeline

on:
  push:
    branches:
      - develop  # develop 브랜치에 푸시될 때 트리거

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Docker Buildx 설정 (옵션)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3. Amazon ECR에 로그인
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # 4. Docker 이미지 빌드
      - name: Build Docker image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      # 5. Docker 이미지 ECR에 푸시
      - name: Push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # 6. ECS Task Definition 업데이트
      - name: Update ECS Task Definition
        run: |
          sed -e "s|<IMAGE_URI>|${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}|g" aws/ecs-task-def.json > aws/ecs-task-def-updated.json

      # 7. 새로운 Task Definition 등록
      - name: Register ECS Task Definition
        id: register-task-def
        uses: aws-actions/amazon-ecs-register-task-definition@v1
        with:
          task-definition: aws/ecs-task-def-updated.json

      # 8. ECS 서비스 업데이트
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: aws/ecs-task-def-updated.json
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true
